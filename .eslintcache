[{"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\index.js":"1","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\App.js":"2","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\reportWebVitals.js":"3","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\ChatPage.js":"4","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\RegisterPage\\RegisterPage.js":"5","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\LoginPage\\LoginPage.js":"6","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\index.js":"7","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\serviceWorker.js":"8","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\firebase.js":"9","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\user_action.js":"10","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\types.js":"11","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\user_reducer.js":"12","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MainPanel.js":"13","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\SidePanel.js":"14","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\UserPanel.js":"15","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\Favorited.js":"16","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\DirectMessages.js":"17","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\ChatRooms.js":"18","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\Message.js":"19","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageHeader.js":"20","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageForm.js":"21","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\chatRoom_action.js":"22","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\chatRoom_reducer.js":"23","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\commons\\components\\Skeleton.js":"24","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\TopHeaderPanel\\TopHeaderPanel.js":"25","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\verySidePanel.js":"26","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\UserPanel.js":"27","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\ChatRooms.js":"28","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\Favorited.js":"29","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\DirectMessages.js":"30","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\VerySidePanel.js":"31","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\Favorited.js":"32","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\UserPanel.js":"33","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\DirectMessages.js":"34","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\ChatRooms.js":"35","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\FindUser.js":"36"},{"size":1228,"mtime":1608278973697,"results":"37","hashOfConfig":"38"},{"size":1435,"mtime":1610478537277,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":1607670824722,"results":"40","hashOfConfig":"41"},{"size":1498,"mtime":1610216711196,"results":"42","hashOfConfig":"38"},{"size":3832,"mtime":1610567801418,"results":"43","hashOfConfig":"38"},{"size":2243,"mtime":1610382965776,"results":"44","hashOfConfig":"38"},{"size":287,"mtime":1608704812538,"results":"45","hashOfConfig":"38"},{"size":5086,"mtime":1608124206201,"results":"46","hashOfConfig":"38"},{"size":723,"mtime":1608272031392,"results":"47","hashOfConfig":"38"},{"size":352,"mtime":1608284181684,"results":"48","hashOfConfig":"38"},{"size":334,"mtime":1608706076310,"results":"49","hashOfConfig":"38"},{"size":799,"mtime":1608720683359,"results":"50","hashOfConfig":"38"},{"size":12890,"mtime":1610565020493,"results":"51","hashOfConfig":"38"},{"size":1710,"mtime":1610565021387,"results":"52","hashOfConfig":"38"},{"size":5584,"mtime":1610568905872,"results":"53","hashOfConfig":"38"},{"size":4851,"mtime":1610478160770,"results":"54","hashOfConfig":"38"},{"size":7171,"mtime":1610558994527,"results":"55","hashOfConfig":"38"},{"size":11021,"mtime":1610065558251,"results":"56","hashOfConfig":"41"},{"size":2007,"mtime":1610046724293,"results":"57","hashOfConfig":"38"},{"size":10134,"mtime":1610478533632,"results":"58","hashOfConfig":"38"},{"size":8688,"mtime":1610559733134,"results":"59","hashOfConfig":"38"},{"size":508,"mtime":1608706065169,"results":"60","hashOfConfig":"38"},{"size":716,"mtime":1608720723162,"results":"61","hashOfConfig":"38"},{"size":306,"mtime":1608719593222,"results":"62","hashOfConfig":"38"},{"size":436,"mtime":1610565768798,"results":"63","hashOfConfig":"38"},{"size":547,"mtime":1608788396673,"results":"64","hashOfConfig":"41"},{"size":3245,"mtime":1608787828457,"results":"65","hashOfConfig":"41"},{"size":11014,"mtime":1608787828287,"results":"66","hashOfConfig":"41"},{"size":3137,"mtime":1608787828387,"results":"67","hashOfConfig":"41"},{"size":3276,"mtime":1608787828345,"results":"68","hashOfConfig":"41"},{"size":498,"mtime":1610396645111,"results":"69","hashOfConfig":"38"},{"size":3607,"mtime":1610384133867,"results":"70","hashOfConfig":"41"},{"size":3245,"mtime":1608787828457,"results":"71","hashOfConfig":"41"},{"size":3276,"mtime":1610384000766,"results":"72","hashOfConfig":"41"},{"size":12496,"mtime":1610565019206,"results":"73","hashOfConfig":"38"},{"size":382,"mtime":1608791861333,"results":"74","hashOfConfig":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"87s02w",{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tifqp2",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"77"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"77"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\index.js",[],["153","154"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\App.js",["155"],"import React, { useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\n\nimport ChatPage from \"./components/ChatPage/ChatPage\";\nimport LoginPage from \"./components/LoginPage/LoginPage\";\nimport RegisterPage from \"./components/RegisterPage/RegisterPage\";\n\nimport firebase from \"./firebase\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUser, clearUser } from \"./redux/actions/user_action\";\n\nfunction App(props) {\n  let history = useHistory(); //function리액트는 이렇게\n  // withRouter 로 redirect시키는건 클래스형!\n  let dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.user.isLoading);\n  //리덕스에 있는 내용을 가져올때 useSelector 쓴다!\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      console.log(\"user\", user); //계속 유저의 상태를 지켜본다!\n      //로그인이 된 상태\n      if (user) {\n        history.push(\"/\");\n        dispatch(setUser(user));\n      } else {\n        history.push(\"/login\");\n        dispatch(clearUser());\n      }\n    });\n  }, []);\n\n  if (isLoading) {\n    return <div>...loading</div>;\n  } else {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ChatPage} />\n        <Route exact path=\"/login\" component={LoginPage} />\n        <Route exact path=\"/register\" component={RegisterPage} />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\reportWebVitals.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\ChatPage.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\RegisterPage\\RegisterPage.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\LoginPage\\LoginPage.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\index.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\serviceWorker.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\firebase.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\user_action.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\types.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\user_reducer.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MainPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\SidePanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\UserPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\Favorited.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\DirectMessages.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\ChatRooms.js",[],["156","157"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\Message.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageHeader.js",["158"],"import React, { useState, useEffect } from \"react\";\r\n// import Container from \"react-bootstrap/Container\";\r\n// import Row from \"react-bootstrap/Row\";\r\n// import Col from \"react-bootstrap/Col\";\r\n// import InputGroup from \"react-bootstrap/InputGroup\";\r\n// import FormControl from \"react-bootstrap/FormControl\";\r\n// import Image from \"react-bootstrap/Image\";\r\n// import Accordion from \"react-bootstrap/Accordion\";\r\n// import Card from \"react-bootstrap/Card\";\r\n// import Button from \"react-bootstrap/Button\";\r\n// import { FaLock } from \"react-icons/fa\";\r\n// import { FaLockOpen } from \"react-icons/fa\";\r\n// import { MdFavorite, MdFavoriteBorder } from \"react-icons/md\";\r\n// import { AiOutlineSearch } from \"react-icons/ai\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useSelector } from \"react-redux\";\r\nimport firebase from \"../../../firebase\";\r\nimport { Media } from \"react-bootstrap\";\r\nimport {\r\n  InfoCircleFill,\r\n  HeartFill,\r\n  Heart,\r\n  PeopleFill,\r\n  PersonFill,\r\n} from \"react-bootstrap-icons\";\r\nimport styles from \"./MessageHeader.module.css\";\r\n// import InfoModal from \"./InfoModal\";\r\n\r\nfunction MessageHeader({ handleSearchChange }) {\r\n  const chatRoom = useSelector((state) => state.chatRoom.currentChatRoom);\r\n  const isPrivateChatRoom = useSelector(\r\n    (state) => state.chatRoom.isPrivateChatRoom\r\n  );\r\n  const [isFavorited, setIsFavorited] = useState(false);\r\n  const usersRef = firebase.database().ref(\"users\");\r\n  const user = useSelector((state) => state.user.currentUser);\r\n  const userPosts = useSelector((state) => state.chatRoom.userPosts);\r\n  const [show, setShow] = useState(false);\r\n\r\n  //데이터 베이스 한번가져옴.. 나머지 는 데베에서 결과 바껴도.. 저장되고..\r\n  // 다시 킬때 최종결과 데베에서 다시 가져옴!\r\n  useEffect(() => {\r\n    if (chatRoom && user) {\r\n      addFavoriteListener(chatRoom.id, user.uid);\r\n    }\r\n  }, []);\r\n\r\n  const addFavoriteListener = (chatRoomId, userId) => {\r\n    //여기서는 좋아요가 눌어져있는지 아닌지 체크 해서.. null이 아닌경우\r\n    //즉 체크 되어있을때 setIsFavorited 에 참or거짓을 넣어준다\r\n    usersRef\r\n      .child(userId)\r\n      .child(\"favorited\")\r\n      .once(\"value\")\r\n      .then((data) => {\r\n        // console.log(\"data초기\", data.val());\r\n        if (data.val() !== null) {\r\n          const chatRoomIds = Object.keys(data.val());\r\n          //이렇게 하면 좋아요 누른 방의 id가 chatRoomIds에 들어간다\r\n\r\n          // console.log(\"data.val()\", data.val());\r\n          // console.log(\"chatRoomIds\", chatRoomIds);\r\n          const isAlreadyFavorited = chatRoomIds.includes(chatRoomId);\r\n          //여기서 포함됬는지 안했는지 알아본다!\r\n          // console.log(\"isAlreadyFavorited\", isAlreadyFavorited);\r\n          setIsFavorited(isAlreadyFavorited);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleFavorite = () => {\r\n    if (isFavorited) {\r\n      usersRef\r\n        .child(`${user.uid}/favorited`)\r\n        .child(chatRoom.id)\r\n        .remove((err) => {\r\n          if (err !== null) {\r\n            console.error(err);\r\n          }\r\n        });\r\n      setIsFavorited((prev) => !prev);\r\n    } else {\r\n      usersRef.child(`${user.uid}/favorited`).update({\r\n        [chatRoom.id]: {\r\n          name: chatRoom.name,\r\n          description: chatRoom.description,\r\n          createdBy: {\r\n            name: chatRoom.createdBy.name,\r\n            image: chatRoom.createdBy.image,\r\n          },\r\n        },\r\n      });\r\n      setIsFavorited((prev) => !prev);\r\n      //setIsFavorited 의 isFavorited 의 요소를 반대로 바꿔주기!\r\n    }\r\n  };\r\n\r\n  const handleInfo = () => {\r\n    setShow(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  };\r\n\r\n  //post count 뿌려줘야한다!\r\n  //userPosts 리덕스를통해 가져옴! mainpanel에서 준정보!\r\n  const renderUserPosts = (userPosts) =>\r\n    //sort 쓰기위해선 키값 , value 하나 인배열로 바꿔줘야한다!\r\n    //userPosts는 객체이므로..   Object.entries(userPosts)를 통해\r\n    // [[0:\"username1\", 1:[count:2, image:\"~~\"],[0:\"username1\", 1:[count:2, image:\"~~\"]]\r\n    // 되어서 나온다.. 그래서 각 배열속의 배열의 1인덱스의 count가 필요!\r\n    Object.entries(userPosts)\r\n      .sort((a, b) => b[1].count - a[1].count)\r\n      //여기까지 카운트가 큰순으로 정렬된다.. a-b는 작은순에서큰순!!\r\n      .map(([key, val], i) =>\r\n        userPosts ? (\r\n          <Media key={i}>\r\n            <img\r\n              style={{ borderRadius: 25 }}\r\n              width={48}\r\n              height={48}\r\n              className=\"mr-3\"\r\n              src={val.image}\r\n              alt={val.name}\r\n            />\r\n            <Media.Body>\r\n              <h6 className={styles.name}>{key}</h6>\r\n              <p className={styles.number}>{val.count} message(s)</p>\r\n            </Media.Body>\r\n          </Media>\r\n        ) : null\r\n      );\r\n  // if (userPosts === null) {\r\n  //   <div>There is no post</div>;\r\n  // } else {\r\n  //   //sort 쓰기위해선 키값 , value 하나 인배열로 바꿔줘야한다!\r\n  //   //userPosts는 객체이므로..   Object.entries(userPosts)를 통해\r\n  //   // [[0:\"username1\", 1:[count:2, image:\"~~\"],[0:\"username1\", 1:[count:2, image:\"~~\"]]\r\n  //   // 되어서 나온다.. 그래서 각 배열속의 배열의 1인덱스의 count가 필요!\r\n  //   Object.entries(userPosts)\r\n  //     .sort((a, b) => b[1].count - a[1].count)\r\n  //     //여기까지 카운트가 큰순으로 정렬된다.. a-b는 작은순에서큰순!!\r\n  //     .map(([key, val], i) => (\r\n  //       <Media key={i}>\r\n  //         <img\r\n  //           style={{ borderRadius: 25 }}\r\n  //           width={48}\r\n  //           height={48}\r\n  //           className=\"mr-3\"\r\n  //           src={val.image}\r\n  //           alt={val.name}\r\n  //         />\r\n  //         <Media.Body>\r\n  //           <h6 className={styles.name}>{key}</h6>\r\n  //           <p className={styles.number}>{val.count} message(s)</p>\r\n  //         </Media.Body>\r\n  //       </Media>\r\n  //     ));\r\n  // }\r\n  //sort 쓰기위해선 키값 , value 하나 인배열로 바꿔줘야한다!\r\n  //userPosts는 객체이므로..   Object.entries(userPosts)를 통해\r\n  // [[0:\"username1\", 1:[count:2, image:\"~~\"],[0:\"username1\", 1:[count:2, image:\"~~\"]]\r\n  // 되어서 나온다.. 그래서 각 배열속의 배열의 1인덱스의 count가 필요!\r\n\r\n  return (\r\n    <div className={styles.bigBox}>\r\n      {/* 모든건 부트스트랩 활용하여 UI만들었음! */}\r\n\r\n      <div className={styles.chatName}>\r\n        {isPrivateChatRoom ? (\r\n          <PersonFill style={{ marginBottom: \"5px\" }} size={25} />\r\n        ) : (\r\n          // 열쇠 아이콘!!\r\n          <PeopleFill style={{ marginBottom: \"5px\" }} size={25} />\r\n        )}\r\n\r\n        <span className={styles.roomName}>{chatRoom && chatRoom.name}</span>\r\n      </div>\r\n\r\n      <div className={styles.des}></div>\r\n      <div className={styles.count}></div>\r\n      <div className={styles.input}>\r\n        {/* <InputGroup className=\"mb-3\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text id=\"basic-addon1\">\r\n              <AiOutlineSearch />\r\n            </InputGroup.Text>\r\n          </InputGroup.Prepend> */}\r\n\r\n        <form>\r\n          <input\r\n            className={styles.input}\r\n            onChange={handleSearchChange}\r\n            placeholder=\"Search Messages..\"\r\n          />\r\n        </form>\r\n        {/* </InputGroup> */}\r\n      </div>\r\n      <div className={styles.icon}>\r\n        <span\r\n          style={{\r\n            cursor: \"pointer\",\r\n            marginLeft: \"8px\",\r\n          }}\r\n          onClick={handleInfo}\r\n        >\r\n          <InfoCircleFill size={20} />\r\n        </span>\r\n        {!isPrivateChatRoom && (\r\n          <span\r\n            style={{\r\n              cursor: \"pointer\",\r\n              marginLeft: \"8px\",\r\n            }}\r\n            onClick={handleFavorite}\r\n          >\r\n            {isFavorited ? <HeartFill size={17} /> : <Heart size={17} />}\r\n          </span>\r\n        )}\r\n      </div>\r\n      {/* {!isPrivateChatRoom && (\r\n        <div>\r\n          <p>\r\n            <Image\r\n              src={chatRoom && chatRoom.createdBy.image}\r\n              roundedCircle\r\n              style={{ width: \"30px\", height: \"30px\" }}\r\n            />\r\n            {chatRoom && chatRoom.createdBy.name}\r\n          </p>\r\n        </div>\r\n      )} */}\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header\r\n          closeButton\r\n          style={{ backgroundColor: \"#363a3f\", color: \"white\" }}\r\n        >\r\n          <Modal.Title>Infomation Of This Room</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ backgroundColor: \"#363a3f\" }}>\r\n          <div className={styles.upBox}>\r\n            <span className={styles.discription}>Discription</span>\r\n            <div className={styles.discriptionInside}>\r\n              {chatRoom && chatRoom.description}\r\n            </div>\r\n          </div>\r\n          <div className={styles.downBox}>\r\n            {userPosts && renderUserPosts(userPosts)}\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageHeader;\r\n\r\n// <Container>\r\n// <Accordion>\r\n//   <Card>\r\n//     <Card.Header>\r\n//       {/* <Card.Header style={{ height: \"25px\", padding: \"0 1rem\" }}> */}\r\n//       <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n//         Description\r\n//       </Accordion.Toggle>\r\n//     </Card.Header>\r\n//     <Accordion.Collapse eventKey=\"0\">\r\n//       <Card.Body>{chatRoom && chatRoom.description}</Card.Body>\r\n//     </Accordion.Collapse>\r\n//   </Card>\r\n// </Accordion>\r\n// </div>\r\n// <div>\r\n// <Accordion>\r\n//   <Card>\r\n//     <Card.Header style={{ padding: \"0 1rem\" }}>\r\n//       <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n//         Posts Count\r\n//       </Accordion.Toggle>\r\n//     </Card.Header>\r\n//     <Accordion.Collapse eventKey=\"0\">\r\n//       <Card.Body>{userPosts && renderUserPosts(userPosts)}</Card.Body>\r\n//     </Accordion.Collapse>\r\n//   </Card>\r\n// </Accordion>\r\n// </Container>\r\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageForm.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\chatRoom_action.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\chatRoom_reducer.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\commons\\components\\Skeleton.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\TopHeaderPanel\\TopHeaderPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\verySidePanel.js",["159","160","161","162"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\UserPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\ChatRooms.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\Favorited.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\DirectMessages.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\VerySidePanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\Favorited.js",[],["163","164"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\UserPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\DirectMessages.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\ChatRooms.js",["165"],"import React, { Component } from \"react\";\r\n// import { FaRegSmileWink } from \"react-icons/fa\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../../firebase\";\r\nimport styles from \"./ChatRooms.module.css\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\nimport {\r\n  setCurrentChatRoom,\r\n  setPrivateChatRoom,\r\n} from \"../../../redux/actions/chatRoom_action\";\r\n\r\nexport class ChatRooms extends Component {\r\n  state = {\r\n    show: false,\r\n    name: \"\",\r\n    description: \"\",\r\n    chatRoomsRef: firebase.database().ref(\"chatRooms\"),\r\n    messagesRef: firebase.database().ref(\"messages\"),\r\n    chatRooms: [],\r\n    firstLoad: true,\r\n    activeChatRoomId: \"\",\r\n    notifications: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.AddChatRoomsListeners();\r\n    //랜더 될때 한번 실행됨\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //컴포넌트가 없어지기 직전에 실행시킴!\r\n    this.state.chatRoomsRef.off(); //off가 리스너 끄는것임!\r\n    this.state.chatRooms.forEach((chatRoom) => {\r\n      this.state.messagesRef.child(chatRoom.id).off();\r\n    });\r\n  }\r\n\r\n  setFirstChatRoom = () => {\r\n    const firstChatRoom = this.state.chatRooms[0];\r\n    if (this.state.firstLoad && this.state.chatRooms.length > 0) {\r\n      this.props.dispatch(setCurrentChatRoom(firstChatRoom)); //리덕스사용!\r\n      //쳇룸 액션에 있음!\r\n      this.setState({ activeChatRoomId: firstChatRoom.id });\r\n      //처음 방이 색들어오게 하기!\r\n    }\r\n    this.setState({ firstLoad: false });\r\n    //처음로그인됐을때만... 처음방을 기준으로 설정해준다!\r\n  };\r\n\r\n  AddChatRoomsListeners = () => {\r\n    let chatRoomsArray = [];\r\n\r\n    //이 리스너를 통해서.. 채팅방 만들때마다 추가됨을 확인할수있따!\r\n    this.state.chatRoomsRef.on(\"child_added\", (DataSnapshot) => {\r\n      // console.log(\"DataSnapshot\", DataSnapshot);\r\n      // console.log(\"DataSnapshot val\", DataSnapshot.val());\r\n      //child_added데이터 추가됬을때..반응함!  child_removed 도 있음\r\n      chatRoomsArray.push(DataSnapshot.val());\r\n      this.setState({ chatRooms: chatRoomsArray }, () =>\r\n        this.setFirstChatRoom()\r\n      );\r\n      // console.log(\"DataSnapshot.key\", DataSnapshot.key);\r\n      this.addNotificationListener(DataSnapshot.key);\r\n      //체팅방 아이디를 이용해 각방 알림정보 리스너 작동!\r\n      //체티방 하나하나의 ID가 안에 들어갈것임!\r\n    });\r\n  };\r\n\r\n  addNotificationListener = (chatRoomId) => {\r\n    //value는 데이터초기값줄때와, 매번변동될때 listener 작동!\r\n    this.state.messagesRef.child(chatRoomId).on(\"value\", (DataSnapshot) => {\r\n      //각각의 메시지들은 어느체팅방에 속해있는지에 대한 chatRoomId가있음\r\n      //message테이블 -> chatRoomId -> 메시지들 id -> 내용\r\n      if (this.props.chatRoom) {\r\n        //리덕스에서 가져온다(현재 클릭된 챗룸 값을..)\r\n        this.handleNotification(\r\n          chatRoomId, //사이드화면에 있는 체팅방 ID\r\n          this.props.chatRoom.id, //현재 켜져있는 채팅방ID\r\n          this.state.notifications,\r\n          DataSnapshot\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  handleNotification = (\r\n    chatRoomId,\r\n    currentChatRoomId,\r\n    notifications,\r\n    DataSnapshot\r\n  ) => {\r\n    let lastTotal = 0;\r\n\r\n    // 이미 notifications state 안에 알림 정보가 들어있는 채팅방과 그렇지 않은 채팅방을 나눠주기\r\n    let index = notifications.findIndex(\r\n      //findIndex는 조건을 만족하는 가장가까운 배열위치의 인덱스를 반환\r\n      //없으면 -1.. ex [1,2,4] x>2 라고 치면 반환은 2 인덱스가 된다!\r\n      (notification) => notification.id === chatRoomId\r\n    );\r\n\r\n    //notifications state 안에 해당 채팅방의 알림 정보가 없을 때\r\n    if (index === -1) {\r\n      notifications.push({\r\n        id: chatRoomId,\r\n        total: DataSnapshot.numChildren(), //자식배열 갯수!\r\n        lastKnownTotal: DataSnapshot.numChildren(),\r\n        count: 0,\r\n      });\r\n    }\r\n    //------------즉 자손의 갯수 저장.. 다시 전체자손(이전자손 + 새로운 자손)\r\n    //---------저장해놓은것과 전체 자손 차이가 읽지 않은 notification의 갯수가 된다\r\n    // 이미 해당 채팅방의 알림 정보가 있을 떄\r\n    else {\r\n      //상대방이 채팅 보내는 그 해당 채팅방에 있지 않을 때\r\n      if (chatRoomId !== currentChatRoomId) {\r\n        //현재까지 유저가 확인한 총 메시지 개수\r\n        lastTotal = notifications[index].lastKnownTotal;\r\n        //인덱스는..현재 방의 위치를 말함.. 그위치에 따른\r\n        //notification의 lastKowntotal 임\r\n\r\n        //count (알림으로 보여줄 숫자)를 구하기\r\n        //현재 총 메시지 개수 - 이전에 확인한 총 메시지 개수 > 0\r\n        //현재 총 메시지 개수가 10개이고 이전에 확인한 메시지가 8개 였다면 2개를 알림으로 보여줘야함.\r\n        if (DataSnapshot.numChildren() - lastTotal > 0) {\r\n          notifications[index].count = DataSnapshot.numChildren() - lastTotal;\r\n        }\r\n      }\r\n      //total property에 현재 전체 메시지 개수를 넣어주기\r\n      notifications[index].total = DataSnapshot.numChildren();\r\n    }\r\n    //목표는 방 하나 하나의 맞는 알림 정보를 notifications state에  넣어주기\r\n    this.setState({ notifications });\r\n  };\r\n\r\n  handleClose = () => this.setState({ show: false });\r\n  handleShow = () => this.setState({ show: true });\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, description } = this.state;\r\n\r\n    if (this.isFormValid(name, description)) {\r\n      this.addChatRoom();\r\n    }\r\n  };\r\n\r\n  addChatRoom = async () => {\r\n    const key = this.state.chatRoomsRef.push().key;\r\n    //.push().key를 통해 자동으로 key를 생성한다!! 그냥 공식임!\r\n\r\n    const { name, description } = this.state;\r\n    const { user } = this.props;\r\n    // 맨밑에 connect를 통해여 리덕스에서\r\n    //가져왔음!\r\n    const newChatRoom = {\r\n      id: key,\r\n      name: name,\r\n      description: description,\r\n      createdBy: {\r\n        name: user.displayName,\r\n        image: user.photoURL,\r\n      },\r\n    };\r\n\r\n    try {\r\n      await this.state.chatRoomsRef.child(key).update(newChatRoom);\r\n      //방생성!!\r\n      this.setState({\r\n        name: \"\",\r\n        description: \"\",\r\n        show: false, //모달 닫기\r\n      });\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  isFormValid = (name, description) => name && description;\r\n\r\n  changeChatRoom = (room) => {\r\n    this.props.dispatch(setCurrentChatRoom(room));\r\n    this.props.dispatch(setPrivateChatRoom(false));\r\n    //DM에서 넘어오면 private를 false로 리덕스 통해 바꿔줌!\r\n    this.setState({ activeChatRoomId: room.id });\r\n    this.clearNotification();\r\n  };\r\n\r\n  clearNotification = () => {\r\n    let index = this.state.notifications.findIndex(\r\n      (notification) => notification.id === this.props.chatRoom.id\r\n    );\r\n\r\n    if (index !== -1) {\r\n      let updatedNotifications = [...this.state.notifications];\r\n      updatedNotifications[index].lastKnownTotal = this.state.notifications[\r\n        index\r\n      ].total;\r\n      //child갯수와(총매세지 갯수와) lastKnownTOtal과 같게 해준다..\r\n      //count는 Total과 lastKnownTotal의 차이가 될것이기에..\r\n      updatedNotifications[index].count = 0;\r\n      this.setState({ notifications: updatedNotifications });\r\n    }\r\n  };\r\n\r\n  getNotificationCount = (room) => {\r\n    //해당 채팅방의 count수를 구하는 중입니다.\r\n    let count = 0;\r\n\r\n    this.state.notifications.forEach((notification) => {\r\n      if (notification.id === room.id) {\r\n        count = notification.count;\r\n      }\r\n    });\r\n    if (count > 0) return count;\r\n  };\r\n\r\n  renderChatRooms = (chatRooms) =>\r\n    chatRooms.length > 0 &&\r\n    chatRooms.map((room) => (\r\n      <li\r\n        className={styles.li}\r\n        key={room.id}\r\n        // style={{\r\n        //   backgroundColor:\r\n        //     room.id === this.state.activeChatRoomId && \"#ffffff45\",\r\n        // }}\r\n        //룸아이디와 셀랙된게 같으면 색깔을 변화하겠음!\r\n        onClick={() => this.changeChatRoom(room)} //현재 체팅방 설정!\r\n      >\r\n        <img\r\n          style={{\r\n            borderRadius: room.id === this.state.activeChatRoomId && \"10px\",\r\n          }}\r\n          className={styles.avatar}\r\n          src={room.createdBy.image}\r\n          alt=\"img\"\r\n        />\r\n        <span className={styles.name}> {room.name}</span>\r\n\r\n        <Badge className={styles.badge} variant=\"danger\">\r\n          {this.getNotificationCount(room)}\r\n        </Badge>\r\n      </li>\r\n    ));\r\n\r\n  render() {\r\n    const renderThumb = ({ style, ...props }) => {\r\n      const thumbStyle = {\r\n        borderRadius: 6,\r\n        backgroundColor: \"black\",\r\n      };\r\n      return <div style={{ ...style, ...thumbStyle }} {...props} />;\r\n    };\r\n\r\n    const renderThumb_h = ({ style, ...props }) => {\r\n      const thumbStyle = {\r\n        borderRadius: 6,\r\n        backgroundColor: \"black\",\r\n        // overflowX: \"none\",\r\n      };\r\n      return <div style={{ ...style, ...thumbStyle }} {...props} />;\r\n    };\r\n\r\n    const CustomScrollbars = (props) => (\r\n      <Scrollbars\r\n        renderView={(props) => (\r\n          <div {...props} style={{ ...props.style, overflowX: \"hidden\" }} />\r\n        )}\r\n        renderThumbVertical={renderThumb}\r\n        {...props}\r\n      />\r\n    );\r\n    // console.log(\"this.state.chatRooms\", this.state.chatRooms);\r\n    return (\r\n      <div>\r\n        <div className={styles.list}>\r\n          <CustomScrollbars\r\n            style={{ width: \"98%\" }}\r\n            autoHide\r\n            autoHideTimeout={500}\r\n            autoHideDuration={200}\r\n          >\r\n            <ul\r\n              className={styles.ul}\r\n              style={{ listStyleType: \"none\", padding: 0 }}\r\n            >\r\n              {this.renderChatRooms(this.state.chatRooms)}\r\n            </ul>\r\n          </CustomScrollbars>\r\n        </div>\r\n        <div className={styles.plusBox} onClick={this.handleShow}>\r\n          {/* <FaRegSmileWink style={{ marginRight: 3 }} />\r\n          CHAT ROOMS (1) */}\r\n          <FaPlus className={styles.plus} />\r\n        </div>\r\n\r\n        {/* ADD CHAT ROOM MODAL */}\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header\r\n            closeButton\r\n            style={{ backgroundColor: \"#363a3f\", color: \"white\" }}\r\n          >\r\n            <Modal.Title>Create a chat room</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body style={{ backgroundColor: \"#363a3f\", color: \"white\" }}>\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Room name</Form.Label>\r\n                <Form.Control\r\n                  onChange={(e) => this.setState({ name: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter a chat room name\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  onChange={(e) =>\r\n                    this.setState({ description: e.target.value })\r\n                  }\r\n                  type=\"text\"\r\n                  placeholder=\"Enter a chat room description\"\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer style={{ backgroundColor: \"#363a3f\" }}>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleSubmit}>\r\n              Create\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user.currentUser,\r\n    chatRoom: state.chatRoom.currentChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ChatRooms);\r\n//connect...클래스 컴포넌트에서 리덕스 쓰는 방법!\r\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\FindUser.js",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":32,"column":6,"nodeType":"172","endLine":32,"endColumn":8,"suggestions":"173"},{"ruleId":"166","replacedBy":"174"},{"ruleId":"168","replacedBy":"175"},{"ruleId":"170","severity":1,"message":"176","line":46,"column":6,"nodeType":"172","endLine":46,"endColumn":8,"suggestions":"177"},{"ruleId":"178","severity":1,"message":"179","line":2,"column":8,"nodeType":"180","messageId":"181","endLine":2,"endColumn":17},{"ruleId":"178","severity":1,"message":"182","line":3,"column":8,"nodeType":"180","messageId":"181","endLine":3,"endColumn":17},{"ruleId":"178","severity":1,"message":"183","line":4,"column":8,"nodeType":"180","messageId":"181","endLine":4,"endColumn":17},{"ruleId":"178","severity":1,"message":"184","line":5,"column":8,"nodeType":"180","messageId":"181","endLine":5,"endColumn":22},{"ruleId":"166","replacedBy":"185"},{"ruleId":"168","replacedBy":"186"},{"ruleId":"178","severity":1,"message":"187","line":260,"column":11,"nodeType":"180","messageId":"181","endLine":260,"endColumn":24},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["190"],["188"],["189"],"React Hook useEffect has missing dependencies: 'addFavoriteListener', 'chatRoom', and 'user'. Either include them or remove the dependency array.",["191"],"no-unused-vars","'UserPanel' is defined but never used.","Identifier","unusedVar","'Favorited' is defined but never used.","'ChatRooms' is defined but never used.","'DirectMessages' is defined but never used.",["188"],["189"],"'renderThumb_h' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [dispatch, history]",{"range":"196","text":"197"},"Update the dependencies array to be: [addFavoriteListener, chatRoom, user]",{"range":"198","text":"199"},[1007,1009],"[dispatch, history]",[1810,1812],"[addFavoriteListener, chatRoom, user]"]