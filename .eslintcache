[{"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\index.js":"1","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\App.js":"2","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\reportWebVitals.js":"3","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\ChatPage.js":"4","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\RegisterPage\\RegisterPage.js":"5","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\LoginPage\\LoginPage.js":"6","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\index.js":"7","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\serviceWorker.js":"8","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\firebase.js":"9","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\user_action.js":"10","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\types.js":"11","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\user_reducer.js":"12","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MainPanel.js":"13","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\SidePanel.js":"14","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\UserPanel.js":"15","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\Favorited.js":"16","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\DirectMessages.js":"17","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\ChatRooms.js":"18","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\Message.js":"19","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageHeader.js":"20","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageForm.js":"21","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\chatRoom_action.js":"22","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\chatRoom_reducer.js":"23","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\commons\\components\\Skeleton.js":"24","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\TopHeaderPanel\\TopHeaderPanel.js":"25","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\verySidePanel.js":"26","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\UserPanel.js":"27","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\ChatRooms.js":"28","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\Favorited.js":"29","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\DirectMessages.js":"30","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\VerySidePanel.js":"31","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\Favorited.js":"32","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\UserPanel.js":"33","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\DirectMessages.js":"34","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\ChatRooms.js":"35","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\FindUser.js":"36"},{"size":1228,"mtime":1608278973697,"results":"37","hashOfConfig":"38"},{"size":1435,"mtime":1608284121541,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":1607670824722,"results":"40","hashOfConfig":"38"},{"size":1498,"mtime":1610216711196,"results":"41","hashOfConfig":"38"},{"size":3826,"mtime":1610381978565,"results":"42","hashOfConfig":"38"},{"size":2243,"mtime":1610382965776,"results":"43","hashOfConfig":"38"},{"size":287,"mtime":1608704812538,"results":"44","hashOfConfig":"38"},{"size":5086,"mtime":1608124206201,"results":"45","hashOfConfig":"38"},{"size":723,"mtime":1608272031392,"results":"46","hashOfConfig":"38"},{"size":352,"mtime":1608284181684,"results":"47","hashOfConfig":"38"},{"size":334,"mtime":1608706076310,"results":"48","hashOfConfig":"38"},{"size":799,"mtime":1608720683359,"results":"49","hashOfConfig":"38"},{"size":12890,"mtime":1610396467032,"results":"50","hashOfConfig":"38"},{"size":1707,"mtime":1610226045561,"results":"51","hashOfConfig":"38"},{"size":4190,"mtime":1610383387763,"results":"52","hashOfConfig":"38"},{"size":4744,"mtime":1610223980497,"results":"53","hashOfConfig":"38"},{"size":7145,"mtime":1610395249719,"results":"54","hashOfConfig":"38"},{"size":11021,"mtime":1610065558251,"results":"55","hashOfConfig":"38"},{"size":2007,"mtime":1610046724293,"results":"56","hashOfConfig":"38"},{"size":10194,"mtime":1610396468131,"results":"57","hashOfConfig":"38"},{"size":8591,"mtime":1608817512485,"results":"58","hashOfConfig":"38"},{"size":508,"mtime":1608706065169,"results":"59","hashOfConfig":"38"},{"size":716,"mtime":1608720723162,"results":"60","hashOfConfig":"38"},{"size":306,"mtime":1608719593222,"results":"61","hashOfConfig":"38"},{"size":265,"mtime":1608787298875,"results":"62","hashOfConfig":"38"},{"size":547,"mtime":1608788396673,"results":"63","hashOfConfig":"38"},{"size":3245,"mtime":1608787828457,"results":"64","hashOfConfig":"38"},{"size":11014,"mtime":1608787828287,"results":"65","hashOfConfig":"38"},{"size":3137,"mtime":1608787828387,"results":"66","hashOfConfig":"38"},{"size":3276,"mtime":1608787828345,"results":"67","hashOfConfig":"38"},{"size":498,"mtime":1610396645111,"results":"68","hashOfConfig":"38"},{"size":3607,"mtime":1610384133867,"results":"69","hashOfConfig":"38"},{"size":3245,"mtime":1608787828457,"results":"70","hashOfConfig":"38"},{"size":3276,"mtime":1610384000766,"results":"71","hashOfConfig":"38"},{"size":11346,"mtime":1610235564834,"results":"72","hashOfConfig":"38"},{"size":382,"mtime":1608791861333,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1tifqp2",{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\index.js",[],["153","154"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\App.js",["155"],"import React, { useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\n\nimport ChatPage from \"./components/ChatPage/ChatPage\";\nimport LoginPage from \"./components/LoginPage/LoginPage\";\nimport RegisterPage from \"./components/RegisterPage/RegisterPage\";\n\nimport firebase from \"./firebase\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUser, clearUser } from \"./redux/actions/user_action\";\n\nfunction App(props) {\n  let history = useHistory(); //function리액트는 이렇게\n  // withRouter 로 redirect시키는건 클래스형!\n  let dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.user.isLoading);\n  //리덕스에 있는 내용을 가져올때 useSelector 쓴다!\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged((user) => {\n      console.log(\"user\", user); //계속 유저의 상태를 지켜본다!\n      //로그인이 된 상태\n      if (user) {\n        history.push(\"/\");\n        dispatch(setUser(user));\n      } else {\n        history.push(\"/login\");\n        dispatch(clearUser());\n      }\n    });\n  }, []);\n\n  if (isLoading) {\n    return <div>...loading</div>;\n  } else {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ChatPage} />\n        <Route exact path=\"/login\" component={LoginPage} />\n        <Route exact path=\"/register\" component={RegisterPage} />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\reportWebVitals.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\ChatPage.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\RegisterPage\\RegisterPage.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\LoginPage\\LoginPage.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\index.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\serviceWorker.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\firebase.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\user_action.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\types.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\user_reducer.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MainPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\SidePanel.js",["156"],"import React from \"react\";\r\nimport UserPanel from \"./UserPanel\";\r\nimport Favorited from \"./Favorited\";\r\nimport ChatRooms from \"./ChatRooms\";\r\nimport DirectMessages from \"./DirectMessages\";\r\nimport FindUser from \"./FindUser\";\r\nimport styles from \"./SidePanel.module.css\";\r\nimport Scrollbars from \"react-custom-scrollbars\";\r\n\r\nfunction SidePanel() {\r\n  const renderThumb = ({ style, ...props }) => {\r\n    const thumbStyle = {\r\n      borderRadius: 6,\r\n      backgroundColor: \"black\",\r\n    };\r\n    return <div style={{ ...style, ...thumbStyle }} {...props} />;\r\n  };\r\n\r\n  const renderThumb_h = ({ style, ...props }) => {\r\n    const thumbStyle = {\r\n      borderRadius: 6,\r\n      backgroundColor: \"black\",\r\n      // overflowX: \"none\",\r\n    };\r\n    return <div style={{ ...style, ...thumbStyle }} {...props} />;\r\n  };\r\n\r\n  const CustomScrollbars = (props) => (\r\n    <Scrollbars\r\n      renderThumbHorizontal={renderThumb_h}\r\n      renderView={(props) => (\r\n        <div {...props} style={{ ...props.style, overflowX: \"hidden\" }} />\r\n      )}\r\n      renderThumbVertical={renderThumb}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className={styles.box}>\r\n      <FindUser />\r\n      <div className={styles.fdBox}>\r\n        <CustomScrollbars\r\n          style={{ width: \"98%\" }}\r\n          autoHide\r\n          autoHideTimeout={500}\r\n          autoHideDuration={200}\r\n        >\r\n          <div className={styles.insideBox}>\r\n            <Favorited />\r\n\r\n            {/* <ChatRooms /> */}\r\n\r\n            <DirectMessages />\r\n          </div>\r\n        </CustomScrollbars>\r\n      </div>\r\n      <div className={styles.userBox}>\r\n        <UserPanel />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidePanel;\r\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\UserPanel.js",["157","158"],"import React, { useRef } from \"react\";\r\nimport { IoIosChatboxes } from \"react-icons/io\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport firebase from \"../../../firebase\";\r\nimport mime from \"mime-types\";\r\nimport { setPhotoURL } from \"../../../redux/actions/user_action\";\r\nimport styles from \"./UserPanel.module.css\";\r\nimport moment from \"moment\";\r\n\r\nfunction UserPanel() {\r\n  const user = useSelector((state) => state.user.currentUser);\r\n  const dispatch = useDispatch();\r\n  const inputOpenImageRef = useRef();\r\n\r\n  const handleLogout = () => {\r\n    firebase.database().ref(\"users\").child(user.uid).update({\r\n      state: \"offline\",\r\n    });\r\n    firebase.auth().signOut(); //로그아웃하기!\r\n  };\r\n\r\n  const handleOpenImageRef = () => {\r\n    inputOpenImageRef.current.click();\r\n  };\r\n\r\n  const handleUploadImage = async (event) => {\r\n    const file = event.target.files[0];\r\n    var today = new Date();\r\n    const time =\r\n      today.getMonth() +\r\n      today.getDate() +\r\n      today.getHours() +\r\n      today.getMinutes() +\r\n      today.getSeconds();\r\n    const metadata = { contentType: mime.lookup(file.name) };\r\n    // mime을 통해 파일 확장자를 바로 알수있다!\r\n\r\n    try {\r\n      //스토리지에 파일 저장하기\r\n      let uploadTaskSnapshot = await firebase\r\n        .storage()\r\n        .ref()\r\n        .child(`user_image/${time}`) //user_image폴더 안에 넣겠음 storage의\r\n        .put(file, metadata); //데이터를 file에 넣고 metadata 에 확장자를 넣어준다\r\n\r\n      let downloadURL = await uploadTaskSnapshot.ref.getDownloadURL();\r\n      //메소드로 주소 가져옴\r\n\r\n      // 프로필 이미지 수정\r\n      await firebase.auth().currentUser.updateProfile({\r\n        photoURL: downloadURL,\r\n      });\r\n\r\n      dispatch(setPhotoURL(downloadURL));\r\n      //리덕스에 저장된 프로필사진 바꿔주기!\r\n\r\n      //데이터베이스 유저 이미지 수정\r\n      await firebase\r\n        .database()\r\n        .ref(\"users\")\r\n        .child(user.uid) //유저 찾고!!\r\n        .update({ image: downloadURL }); //이미지 수정하기!\r\n\r\n      // console.log('uploadTaskSnapshot', uploadTaskSnapshot)\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  // console.log(\"user\", user);\r\n  const dropstyle = {\r\n    background: \"transparent\",\r\n    border: \"none\",\r\n    marginLeft: \"5px\",\r\n  };\r\n  return (\r\n    user && (\r\n      <div className={styles.UserBox}>\r\n        {/* Logo */}\r\n        {/* <h3 style={{ color: \"white\" }}>\r\n        <IoIosChatboxes /> Chat App\r\n      </h3> */}\r\n\r\n        <div style={{ display: \"flex\", marginBottom: \"1rem\" }}>\r\n          <Image\r\n            src={user && user.photoURL}\r\n            style={{ width: \"30p\", height: \"30px\", marginTop: \"3px\" }}\r\n            roundedCircle\r\n          />\r\n          {/* {user.displayName} */}\r\n          <Dropdown>\r\n            <Dropdown.Toggle\r\n              style={dropstyle}\r\n              variant=\"secondary\"\r\n              // className={styles.dropdown}\r\n              id=\"dropdown-basic\"\r\n            >\r\n              {user && user.displayName}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu className={styles.menu}>\r\n              <Dropdown.Item\r\n                // style={{\r\n                //   backgroundColor: \"black\",\r\n                // }}\r\n                className={styles.item}\r\n                onClick={handleOpenImageRef}\r\n              >\r\n                Change the profile picture\r\n              </Dropdown.Item>\r\n              <Dropdown.Item className={styles.item} onClick={handleLogout}>\r\n                LogOut\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n\r\n        <input\r\n          onChange={handleUploadImage}\r\n          accept=\"image/jpeg, image/png\"\r\n          style={{ display: \"none\" }}\r\n          ref={inputOpenImageRef}\r\n          type=\"file\"\r\n        />\r\n        {/* 숨겨져있다.. ref통해서 클릭시킬것임! \r\n      accept 통해서 파일 속성 정할수있음!*/}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default UserPanel;\r\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\Favorited.js",["159","160","161"],"import React, { Component } from \"react\";\r\nimport { FaRegSmileBeam } from \"react-icons/fa\";\r\nimport firebase from \"../../../firebase\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setCurrentChatRoom,\r\n  setPrivateChatRoom,\r\n} from \"../../../redux/actions/chatRoom_action\";\r\nimport styles from \"./Favorited.module.css\";\r\n\r\nexport class Favorited extends Component {\r\n  state = {\r\n    favoritedChatRooms: [],\r\n    usersRef: firebase.database().ref(\"users\"),\r\n    activeChatRoomId: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.user) {\r\n      this.addListeners(this.props.user.uid);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.props.user) {\r\n      this.removeListener(this.props.user.uid);\r\n    }\r\n  }\r\n\r\n  removeListener = (userId) => {\r\n    this.state.usersRef.child(`${userId}/favorited`).off();\r\n  };\r\n\r\n  addListeners = (userId) => {\r\n    const { usersRef } = this.state;\r\n\r\n    usersRef\r\n      .child(userId)\r\n      .child(\"favorited\")\r\n      .on(\"child_added\", (DataSnapshot) => {\r\n        //데이터가 추가될때 반응한다!!\r\n        const favoritedChatRoom = {\r\n          id: DataSnapshot.key,\r\n          ...DataSnapshot.val(),\r\n        };\r\n        this.setState({\r\n          favoritedChatRooms: [\r\n            ...this.state.favoritedChatRooms,\r\n            favoritedChatRoom,\r\n          ],\r\n        });\r\n      });\r\n\r\n    usersRef\r\n      .child(userId)\r\n      .child(\"favorited\")\r\n      .on(\"child_removed\", (DataSnapshot) => {\r\n        const chatRoomToRemove = {\r\n          id: DataSnapshot.key,\r\n          ...DataSnapshot.val(),\r\n        };\r\n        const filteredChatRooms = this.state.favoritedChatRooms.filter(\r\n          (chatRoom) => {\r\n            return chatRoom.id !== chatRoomToRemove.id;\r\n          } //chatRoom.id !== chatRoomToRemove.id;같지 않는걸 리턴한다!!\r\n          // 즉 removed될 방 뺴고 다 리턴될것임!\r\n        );\r\n        this.setState({ favoritedChatRooms: filteredChatRooms });\r\n      });\r\n  };\r\n\r\n  changeChatRoom = (room) => {\r\n    this.props.dispatch(setCurrentChatRoom(room));\r\n    this.props.dispatch(setPrivateChatRoom(false));\r\n    this.setState({ activeChatRoomId: room.id });\r\n  };\r\n\r\n  renderFavoritedChatRooms = (favoritedChatRooms, currentChat) =>\r\n    favoritedChatRooms.length > 0 &&\r\n    favoritedChatRooms.map((chatRoom) => (\r\n      <li\r\n        className={styles.li}\r\n        key={chatRoom.id}\r\n        onClick={() => this.changeChatRoom(chatRoom)}\r\n        style={{\r\n          backgroundColor: chatRoom.id === currentChat && \" #40444c\",\r\n          color: chatRoom.id === currentChat && \" white\",\r\n          marginBottom: \"4px\",\r\n          paddingLeft: \"5px\",\r\n          height: \"46px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <img className={styles.avatar} src={chatRoom.createdBy.image} />\r\n        <span className={styles.name}> {chatRoom.name}</span>\r\n      </li>\r\n    ));\r\n\r\n  renderFavoritedChatRoomsJust = (favoritedChatRooms) =>\r\n    favoritedChatRooms.length > 0 &&\r\n    favoritedChatRooms.map((chatRoom) => (\r\n      <li\r\n        className={styles.li}\r\n        key={chatRoom.id}\r\n        onClick={() => this.changeChatRoom(chatRoom)}\r\n        style={{\r\n          // backgroundColor:\r\n          //   chatRoom.id === this.state.activeChatRoomId && \" #40444c\",\r\n          // color: chatRoom.id === this.state.activeChatRoomId && \" white\",\r\n          marginBottom: \"4px\",\r\n          paddingLeft: \"5px\",\r\n          height: \"46px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <img className={styles.avatar} src={chatRoom.createdBy.image} />\r\n        <span className={styles.name}> {chatRoom.name}</span>\r\n      </li>\r\n    ));\r\n\r\n  render() {\r\n    const { favoritedChatRooms } = this.state;\r\n    // console.log(\"favoritedChatRooms\", favoritedChatRooms);\r\n    return (\r\n      <div>\r\n        <span className={styles.titlebox}>\r\n          FAVORITED({favoritedChatRooms.length})\r\n        </span>\r\n        <ul className={styles.ul}>\r\n          {/* {this.renderFavoritedChatRooms(favoritedChatRooms)} */}\r\n          {this.props.currentChat !== null\r\n            ? this.renderFavoritedChatRooms(\r\n                favoritedChatRooms,\r\n                this.props.currentChat\r\n              )\r\n            : this.renderFavoritedChatRoomsJust(favoritedChatRooms)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  if (state.chatRoom.currentChatRoom !== null) {\r\n    return {\r\n      user: state.user.currentUser,\r\n      currentChat: state.chatRoom.currentChatRoom.id,\r\n    };\r\n  } else {\r\n    return {\r\n      user: state.user.currentUser,\r\n    };\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Favorited);\r\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\DirectMessages.js",["162","163","164"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\ChatRooms.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\Message.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageHeader.js",["165","166","167","168"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\MainPanel\\MessageForm.js",["169","170","171"],"import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport firebase from \"../../../firebase\";\r\nimport { useSelector } from \"react-redux\";\r\nimport mime from \"mime-types\";\r\nimport styles from \"./MessageForm.module.css\";\r\nimport { FaPlusCircle } from \"react-icons/fa\";\r\nimport { FiSend } from \"react-icons/fi\";\r\nfunction MessageForm() {\r\n  const chatRoom = useSelector((state) => state.chatRoom.currentChatRoom);\r\n  const user = useSelector((state) => state.user.currentUser);\r\n  //리덕스를 이용하여 chat룸의 id를 가져온다!\r\n  const [content, setContent] = useState(\"\");\r\n  const [errors, setErrors] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  //다시 send 못누르게 하기위해!\r\n  const [percentage, setPercentage] = useState(0);\r\n  const inputOpenImageRef = useRef();\r\n\r\n  const messagesRef = firebase.database().ref(\"messages\");\r\n  //ref는 database중 종류가 messages라는 뜻임\r\n\r\n  const storageRef = firebase.storage().ref();\r\n  //파베 스토리지 접근!\r\n  const typingRef = firebase.database().ref(\"typing\");\r\n  const isPrivateChatRoom = useSelector(\r\n    (state) => state.chatRoom.isPrivateChatRoom\r\n  );\r\n  const handleChange = (event) => {\r\n    setContent(event.target.value);\r\n  };\r\n\r\n  const createMessage = (fileUrl = null) => {\r\n    //createMssage() 안에 인자없으면 null임!\r\n    const message = {\r\n      timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n      user: {\r\n        id: user.uid,\r\n        name: user.displayName,\r\n        image: user.photoURL,\r\n      },\r\n    };\r\n\r\n    if (fileUrl !== null) {\r\n      message[\"image\"] = fileUrl;\r\n    } else {\r\n      message[\"content\"] = content;\r\n    }\r\n    return message;\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (!content) {\r\n      setErrors((prev) => prev.concat(\"Type contents first\"));\r\n      //prev는 월래 있던 애러에다가 concat으로 단어 붙어줌!\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    //firebase에 메시지를 저장하는 부분\r\n    try {\r\n      await messagesRef.child(chatRoom.id).push().set(createMessage());\r\n      //체팅방 id를 넣고!\r\n      //매세지 보내줬으면.. 다시 refresh해줘야함!!\r\n\r\n      typingRef.child(chatRoom.id).child(user.uid).remove();\r\n\r\n      setLoading(false);\r\n      setContent(\"\");\r\n      setErrors([]);\r\n    } catch (error) {\r\n      setErrors((pre) => pre.concat(error.message));\r\n      setLoading(false);\r\n      setTimeout(() => {\r\n        setErrors([]);\r\n      }, 5000); //5초 정도후에 setError 없에줌!\r\n    }\r\n  };\r\n\r\n  const handleOpenImageRef = () => {\r\n    inputOpenImageRef.current.click();\r\n  };\r\n\r\n  const getPath = () => {\r\n    if (isPrivateChatRoom) {\r\n      return `/message/private/${chatRoom.id}`;\r\n      //private은 다른경로 로 넣어준다!\r\n    } else {\r\n      return `/message/public`;\r\n    }\r\n  };\r\n\r\n  const handleUploadImage = (event) => {\r\n    const file = event.target.files[0];\r\n\r\n    const filePath = `${getPath()}/${file.name}`;\r\n    const metadata = { contentType: mime.lookup(file.name) };\r\n    // 밈을 쓰면 확장자를 바로 찾아줌!\r\n    setLoading(true);\r\n    try {\r\n      //파일을 먼저 스토리지에 저장\r\n      let uploadTask = storageRef.child(filePath).put(file, metadata);\r\n      //await 빼야함.. 왜냐하면..await은 파일이 전송끝나면 변수에 내용을담는데\r\n      // uploadTask는 상시 변하는걸 체크 당할거기 떄문!\r\n      //파일 저장되는 퍼센티지 구하기\r\n      uploadTask.on(\r\n        //------------첫번쨰 인자는 무엇이 변할때 listen할것인지!!\r\n        \"state_changed\", //상태가 변할때마다 리스너가 작용한다!\r\n\r\n        //----------- 두번째 인자는 파일전송상황\r\n        (UploadTaskSnapshot) => {\r\n          const percentage = Math.round(\r\n            (UploadTaskSnapshot.bytesTransferred /\r\n              UploadTaskSnapshot.totalBytes) *\r\n              100\r\n          ); //bytesTransferred 얼마나 전송됐는지 알려줌!\r\n          setPercentage(percentage);\r\n        },\r\n        //-------------세번째 인자는 파일전송시 에러 발생!\r\n        (err) => {\r\n          console.error(err);\r\n          setLoading(false);\r\n        },\r\n        //--------------네번째 인자는 파일전송 다된걸 어떻게 할것인지!\r\n        () => {\r\n          //저장이 다 된 후에 파일 메시지 전송 (데이터베이스에 저장) 해야\r\n          //그래야 다른사람도 방안의 사진을 볼수있다!\r\n\r\n          //저장된 파일을 다운로드 받을 수 있는 URL 가져오기\r\n          uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n            //getDownloadURL() 의 결과를 downloadURL에 담는다!\r\n\r\n            messagesRef //데이터베이스 message테이블 접근!!\r\n              .child(chatRoom.id) //어떤방인지 넣어주고!\r\n              .push() // 정보를 넣는거니깐 push\r\n              .set(createMessage(downloadURL));\r\n            setLoading(false);\r\n          });\r\n        }\r\n      );\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  //리덕스에 갈필요없다.. db까지만 정보 수정 한후 listener통해 정보 보여주면됨!\r\n  const handleKeyDown = (event) => {\r\n    if (event.ctrlKey && event.keyCode === 13) {\r\n      handleSubmit();\r\n    } //컨트롤 + 엔터는 메세지를 보낼수있다!\r\n    if (content) {\r\n      typingRef.child(chatRoom.id).child(user.uid).set(user.displayName);\r\n    } else {\r\n      typingRef.child(chatRoom.id).child(user.uid).remove();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.bigBox}>\r\n      {!(percentage === 0 || percentage === 100) && (\r\n        <ProgressBar\r\n          variant=\"warning\"\r\n          label={`${percentage}%`}\r\n          now={percentage}\r\n        />\r\n      )}\r\n\r\n      <div>\r\n        {errors.map((errorMsg) => (\r\n          <p style={{ color: \"red\" }} key={errorMsg}>\r\n            {errorMsg}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className={styles.inputBox}>\r\n        <div className={styles.inputLeft}>\r\n          <FaPlusCircle\r\n            onClick={handleOpenImageRef}\r\n            style={{ color: \"white\" }}\r\n            disabled={loading ? true : false}\r\n          />\r\n        </div>\r\n        <form className={styles.formBox} onSubmit={handleSubmit}>\r\n          <input\r\n            className={styles.input}\r\n            onKeyDown={handleKeyDown}\r\n            //  키를 누를때!\r\n            value={content}\r\n            onChange={handleChange}\r\n            placeholder=\"Message\"\r\n          />\r\n        </form>\r\n        <div className={styles.inputRight}>\r\n          <FiSend\r\n            onClick={handleSubmit}\r\n            style={{ color: \"white\" }}\r\n            disabled={loading ? true : false}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* <Form onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n          <Form.Control\r\n            onKeyDown={handleKeyDown}\r\n            //  키를 누를때!\r\n            value={content}\r\n            onChange={handleChange}\r\n            as=\"textarea\"\r\n            rows={2}\r\n          />\r\n        </Form.Group>\r\n      </Form> */}\r\n\r\n      {/* {console.log(\"percentage\", percentage)} */}\r\n\r\n      {/* <Row>\r\n        <Col>\r\n          <button\r\n            onClick={handleSubmit}\r\n            className=\"message-form-button\"\r\n            style={{ width: \"100%\" }}\r\n            disabled={loading ? true : false}\r\n          >\r\n            SEND\r\n          </button>\r\n        </Col>\r\n        <Col>\r\n          <button\r\n            onClick={handleOpenImageRef}\r\n            // 이걸로 인풋 파일 업로드 대신 실행한다!\r\n            className=\"message-form-button\"\r\n            style={{ width: \"100%\" }}\r\n            disabled={loading ? true : false}\r\n          >\r\n            UPLOAD\r\n          </button>\r\n        </Col>\r\n      </Row> */}\r\n\r\n      <input\r\n        accept=\"image/jpeg, image/png\"\r\n        // accept를 통해 어떤 파일형식만 지원할지 정할수있다!\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        ref={inputOpenImageRef}\r\n        onChange={handleUploadImage}\r\n      />\r\n      {/* 업로드 버튼눌러서 실행하게끔 해준다! input버튼이아닌!\r\n      그러기 위해선 ref를 사용해야한다! */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageForm;\r\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\actions\\chatRoom_action.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\redux\\reducers\\chatRoom_reducer.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\commons\\components\\Skeleton.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\TopHeaderPanel\\TopHeaderPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\verySidePanel.js",["172","173","174","175"],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\UserPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\ChatRooms.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\Favorited.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\verySidePanel\\DirectMessages.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\VerySidePanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\Favorited.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\UserPanel.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\DirectMessages.js",[],"C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\VerySidePanel\\ChatRooms.js",["176","177"],"import React, { Component } from \"react\";\r\nimport { FaRegSmileWink } from \"react-icons/fa\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport { connect } from \"react-redux\";\r\nimport firebase from \"../../../firebase\";\r\nimport styles from \"./ChatRooms.module.css\";\r\n\r\nimport {\r\n  setCurrentChatRoom,\r\n  setPrivateChatRoom,\r\n} from \"../../../redux/actions/chatRoom_action\";\r\n\r\nexport class ChatRooms extends Component {\r\n  state = {\r\n    show: false,\r\n    name: \"\",\r\n    description: \"\",\r\n    chatRoomsRef: firebase.database().ref(\"chatRooms\"),\r\n    messagesRef: firebase.database().ref(\"messages\"),\r\n    chatRooms: [],\r\n    firstLoad: true,\r\n    activeChatRoomId: \"\",\r\n    notifications: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.AddChatRoomsListeners();\r\n    //랜더 될때 한번 실행됨\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //컴포넌트가 없어지기 직전에 실행시킴!\r\n    this.state.chatRoomsRef.off(); //off가 리스너 끄는것임!\r\n    this.state.chatRooms.forEach((chatRoom) => {\r\n      this.state.messagesRef.child(chatRoom.id).off();\r\n    });\r\n  }\r\n\r\n  setFirstChatRoom = () => {\r\n    const firstChatRoom = this.state.chatRooms[0];\r\n    if (this.state.firstLoad && this.state.chatRooms.length > 0) {\r\n      this.props.dispatch(setCurrentChatRoom(firstChatRoom)); //리덕스사용!\r\n      //쳇룸 액션에 있음!\r\n      this.setState({ activeChatRoomId: firstChatRoom.id });\r\n      //처음 방이 색들어오게 하기!\r\n    }\r\n    this.setState({ firstLoad: false });\r\n    //처음로그인됐을때만... 처음방을 기준으로 설정해준다!\r\n  };\r\n\r\n  AddChatRoomsListeners = () => {\r\n    let chatRoomsArray = [];\r\n\r\n    //이 리스너를 통해서.. 채팅방 만들때마다 추가됨을 확인할수있따!\r\n    this.state.chatRoomsRef.on(\"child_added\", (DataSnapshot) => {\r\n      // console.log(\"DataSnapshot\", DataSnapshot);\r\n      // console.log(\"DataSnapshot val\", DataSnapshot.val());\r\n      //child_added데이터 추가됬을때..반응함!  child_removed 도 있음\r\n      chatRoomsArray.push(DataSnapshot.val());\r\n      this.setState({ chatRooms: chatRoomsArray }, () =>\r\n        this.setFirstChatRoom()\r\n      );\r\n      // console.log(\"DataSnapshot.key\", DataSnapshot.key);\r\n      this.addNotificationListener(DataSnapshot.key);\r\n      //체팅방 아이디를 이용해 각방 알림정보 리스너 작동!\r\n      //체티방 하나하나의 ID가 안에 들어갈것임!\r\n    });\r\n  };\r\n\r\n  addNotificationListener = (chatRoomId) => {\r\n    //value는 데이터초기값줄때와, 매번변동될때 listener 작동!\r\n    this.state.messagesRef.child(chatRoomId).on(\"value\", (DataSnapshot) => {\r\n      //각각의 메시지들은 어느체팅방에 속해있는지에 대한 chatRoomId가있음\r\n      //message테이블 -> chatRoomId -> 메시지들 id -> 내용\r\n      if (this.props.chatRoom) {\r\n        //리덕스에서 가져온다(현재 클릭된 챗룸 값을..)\r\n        this.handleNotification(\r\n          chatRoomId, //사이드화면에 있는 체팅방 ID\r\n          this.props.chatRoom.id, //현재 켜져있는 채팅방ID\r\n          this.state.notifications,\r\n          DataSnapshot\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  handleNotification = (\r\n    chatRoomId,\r\n    currentChatRoomId,\r\n    notifications,\r\n    DataSnapshot\r\n  ) => {\r\n    let lastTotal = 0;\r\n\r\n    // 이미 notifications state 안에 알림 정보가 들어있는 채팅방과 그렇지 않은 채팅방을 나눠주기\r\n    let index = notifications.findIndex(\r\n      //findIndex는 조건을 만족하는 가장가까운 배열위치의 인덱스를 반환\r\n      //없으면 -1.. ex [1,2,4] x>2 라고 치면 반환은 2 인덱스가 된다!\r\n      (notification) => notification.id === chatRoomId\r\n    );\r\n\r\n    //notifications state 안에 해당 채팅방의 알림 정보가 없을 때\r\n    if (index === -1) {\r\n      notifications.push({\r\n        id: chatRoomId,\r\n        total: DataSnapshot.numChildren(), //자식배열 갯수!\r\n        lastKnownTotal: DataSnapshot.numChildren(),\r\n        count: 0,\r\n      });\r\n    }\r\n    //------------즉 자손의 갯수 저장.. 다시 전체자손(이전자손 + 새로운 자손)\r\n    //---------저장해놓은것과 전체 자손 차이가 읽지 않은 notification의 갯수가 된다\r\n    // 이미 해당 채팅방의 알림 정보가 있을 떄\r\n    else {\r\n      //상대방이 채팅 보내는 그 해당 채팅방에 있지 않을 때\r\n      if (chatRoomId !== currentChatRoomId) {\r\n        //현재까지 유저가 확인한 총 메시지 개수\r\n        lastTotal = notifications[index].lastKnownTotal;\r\n        //인덱스는..현재 방의 위치를 말함.. 그위치에 따른\r\n        //notification의 lastKowntotal 임\r\n\r\n        //count (알림으로 보여줄 숫자)를 구하기\r\n        //현재 총 메시지 개수 - 이전에 확인한 총 메시지 개수 > 0\r\n        //현재 총 메시지 개수가 10개이고 이전에 확인한 메시지가 8개 였다면 2개를 알림으로 보여줘야함.\r\n        if (DataSnapshot.numChildren() - lastTotal > 0) {\r\n          notifications[index].count = DataSnapshot.numChildren() - lastTotal;\r\n        }\r\n      }\r\n      //total property에 현재 전체 메시지 개수를 넣어주기\r\n      notifications[index].total = DataSnapshot.numChildren();\r\n    }\r\n    //목표는 방 하나 하나의 맞는 알림 정보를 notifications state에  넣어주기\r\n    this.setState({ notifications });\r\n  };\r\n\r\n  handleClose = () => this.setState({ show: false });\r\n  handleShow = () => this.setState({ show: true });\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, description } = this.state;\r\n\r\n    if (this.isFormValid(name, description)) {\r\n      this.addChatRoom();\r\n    }\r\n  };\r\n\r\n  addChatRoom = async () => {\r\n    const key = this.state.chatRoomsRef.push().key;\r\n    //.push().key를 통해 자동으로 key를 생성한다!! 그냥 공식임!\r\n\r\n    const { name, description } = this.state;\r\n    const { user } = this.props;\r\n    // 맨밑에 connect를 통해여 리덕스에서\r\n    //가져왔음!\r\n    const newChatRoom = {\r\n      id: key,\r\n      name: name,\r\n      description: description,\r\n      createdBy: {\r\n        name: user.displayName,\r\n        image: user.photoURL,\r\n      },\r\n    };\r\n\r\n    try {\r\n      await this.state.chatRoomsRef.child(key).update(newChatRoom);\r\n      //방생성!!\r\n      this.setState({\r\n        name: \"\",\r\n        description: \"\",\r\n        show: false, //모달 닫기\r\n      });\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  isFormValid = (name, description) => name && description;\r\n\r\n  changeChatRoom = (room) => {\r\n    this.props.dispatch(setCurrentChatRoom(room));\r\n    this.props.dispatch(setPrivateChatRoom(false));\r\n    //DM에서 넘어오면 private를 false로 리덕스 통해 바꿔줌!\r\n    this.setState({ activeChatRoomId: room.id });\r\n    this.clearNotification();\r\n  };\r\n\r\n  clearNotification = () => {\r\n    let index = this.state.notifications.findIndex(\r\n      (notification) => notification.id === this.props.chatRoom.id\r\n    );\r\n\r\n    if (index !== -1) {\r\n      let updatedNotifications = [...this.state.notifications];\r\n      updatedNotifications[index].lastKnownTotal = this.state.notifications[\r\n        index\r\n      ].total;\r\n      //child갯수와(총매세지 갯수와) lastKnownTOtal과 같게 해준다..\r\n      //count는 Total과 lastKnownTotal의 차이가 될것이기에..\r\n      updatedNotifications[index].count = 0;\r\n      this.setState({ notifications: updatedNotifications });\r\n    }\r\n  };\r\n\r\n  getNotificationCount = (room) => {\r\n    //해당 채팅방의 count수를 구하는 중입니다.\r\n    let count = 0;\r\n\r\n    this.state.notifications.forEach((notification) => {\r\n      if (notification.id === room.id) {\r\n        count = notification.count;\r\n      }\r\n    });\r\n    if (count > 0) return count;\r\n  };\r\n\r\n  renderChatRooms = (chatRooms) =>\r\n    chatRooms.length > 0 &&\r\n    chatRooms.map((room) => (\r\n      <li\r\n        className={styles.li}\r\n        key={room.id}\r\n        // style={{\r\n        //   backgroundColor:\r\n        //     room.id === this.state.activeChatRoomId && \"#ffffff45\",\r\n        // }}\r\n        //룸아이디와 셀랙된게 같으면 색깔을 변화하겠음!\r\n        onClick={() => this.changeChatRoom(room)} //현재 체팅방 설정!\r\n      >\r\n        <img\r\n          style={{\r\n            borderRadius: room.id === this.state.activeChatRoomId && \"10px\",\r\n          }}\r\n          className={styles.avatar}\r\n          src={room.createdBy.image}\r\n        />\r\n        <span className={styles.name}> {room.name}</span>\r\n\r\n        <Badge className={styles.badge} variant=\"danger\">\r\n          {this.getNotificationCount(room)}\r\n        </Badge>\r\n      </li>\r\n    ));\r\n\r\n  render() {\r\n    // console.log(\"this.state.chatRooms\", this.state.chatRooms);\r\n    return (\r\n      <div>\r\n        <ul className={styles.ul} style={{ listStyleType: \"none\", padding: 0 }}>\r\n          {this.renderChatRooms(this.state.chatRooms)}\r\n        </ul>\r\n        <div className={styles.plusBox} onClick={this.handleShow}>\r\n          {/* <FaRegSmileWink style={{ marginRight: 3 }} />\r\n          CHAT ROOMS (1) */}\r\n          <FaPlus className={styles.plus} />\r\n        </div>\r\n\r\n        {/* ADD CHAT ROOM MODAL */}\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header\r\n            closeButton\r\n            style={{ backgroundColor: \"#363a3f\", color: \"white\" }}\r\n          >\r\n            <Modal.Title>Create a chat room</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body style={{ backgroundColor: \"#363a3f\", color: \"white\" }}>\r\n            <Form onSubmit={this.handleSubmit}>\r\n              <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Room name</Form.Label>\r\n                <Form.Control\r\n                  onChange={(e) => this.setState({ name: e.target.value })}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter a chat room name\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  onChange={(e) =>\r\n                    this.setState({ description: e.target.value })\r\n                  }\r\n                  type=\"text\"\r\n                  placeholder=\"Enter a chat room description\"\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer style={{ backgroundColor: \"#363a3f\" }}>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleSubmit}>\r\n              Create\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    user: state.user.currentUser,\r\n    chatRoom: state.chatRoom.currentChatRoom,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ChatRooms);\r\n//connect...클래스 컴포넌트에서 리덕스 쓰는 방법!\r\n","C:\\Users\\818396\\Desktop\\my_project\\JohnAhn\\chatting\\src\\components\\ChatPage\\SidePanel\\FindUser.js",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":32,"column":6,"nodeType":"184","endLine":32,"endColumn":8,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":4,"column":8,"nodeType":"188","messageId":"189","endLine":4,"endColumn":17},{"ruleId":"186","severity":1,"message":"190","line":2,"column":10,"nodeType":"188","messageId":"189","endLine":2,"endColumn":24},{"ruleId":"186","severity":1,"message":"191","line":10,"column":8,"nodeType":"188","messageId":"189","endLine":10,"endColumn":14},{"ruleId":"186","severity":1,"message":"192","line":2,"column":10,"nodeType":"188","messageId":"189","endLine":2,"endColumn":24},{"ruleId":"193","severity":1,"message":"194","line":95,"column":9,"nodeType":"195","endLine":95,"endColumn":73},{"ruleId":"193","severity":1,"message":"194","line":118,"column":9,"nodeType":"195","endLine":118,"endColumn":73},{"ruleId":"186","severity":1,"message":"196","line":2,"column":10,"nodeType":"188","messageId":"189","endLine":2,"endColumn":20},{"ruleId":"193","severity":1,"message":"194","line":138,"column":9,"nodeType":"195","endLine":138,"endColumn":59},{"ruleId":"193","severity":1,"message":"194","line":166,"column":9,"nodeType":"195","endLine":166,"endColumn":59},{"ruleId":"186","severity":1,"message":"197","line":21,"column":3,"nodeType":"188","messageId":"189","endLine":21,"endColumn":20},{"ruleId":"186","severity":1,"message":"198","line":22,"column":3,"nodeType":"188","messageId":"189","endLine":22,"endColumn":16},{"ruleId":"186","severity":1,"message":"199","line":23,"column":3,"nodeType":"188","messageId":"189","endLine":23,"endColumn":21},{"ruleId":"182","severity":1,"message":"200","line":49,"column":6,"nodeType":"184","endLine":49,"endColumn":8,"suggestions":"201"},{"ruleId":"186","severity":1,"message":"202","line":2,"column":8,"nodeType":"188","messageId":"189","endLine":2,"endColumn":12},{"ruleId":"186","severity":1,"message":"203","line":4,"column":8,"nodeType":"188","messageId":"189","endLine":4,"endColumn":11},{"ruleId":"186","severity":1,"message":"204","line":5,"column":8,"nodeType":"188","messageId":"189","endLine":5,"endColumn":11},{"ruleId":"186","severity":1,"message":"205","line":2,"column":8,"nodeType":"188","messageId":"189","endLine":2,"endColumn":17},{"ruleId":"186","severity":1,"message":"206","line":3,"column":8,"nodeType":"188","messageId":"189","endLine":3,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":4,"column":8,"nodeType":"188","messageId":"189","endLine":4,"endColumn":17},{"ruleId":"186","severity":1,"message":"207","line":5,"column":8,"nodeType":"188","messageId":"189","endLine":5,"endColumn":22},{"ruleId":"186","severity":1,"message":"208","line":2,"column":10,"nodeType":"188","messageId":"189","endLine":2,"endColumn":24},{"ruleId":"193","severity":1,"message":"194","line":235,"column":9,"nodeType":"195","endLine":241,"endColumn":11},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["211"],"no-unused-vars","'ChatRooms' is defined but never used.","Identifier","unusedVar","'IoIosChatboxes' is defined but never used.","'moment' is defined but never used.","'FaRegSmileBeam' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FaRegSmile' is defined but never used.","'BookmarkHeartFill' is defined but never used.","'BookmarkHeart' is defined but never used.","'EmojiHeartEyesFill' is defined but never used.","React Hook useEffect has missing dependencies: 'addFavoriteListener', 'chatRoom', and 'user'. Either include them or remove the dependency array.",["212"],"'Form' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'UserPanel' is defined but never used.","'Favorited' is defined but never used.","'DirectMessages' is defined but never used.","'FaRegSmileWink' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},"Update the dependencies array to be: [dispatch, history]",{"range":"217","text":"218"},"Update the dependencies array to be: [addFavoriteListener, chatRoom, user]",{"range":"219","text":"220"},[1007,1009],"[dispatch, history]",[1873,1875],"[addFavoriteListener, chatRoom, user]"]